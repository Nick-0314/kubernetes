# Secret

secret对象类型用来保存敏感信息，例如密码，令牌，和SSH Key，将这些信息放在Secret中比较安全和灵活。用户可以创建Secret并且引用到Pod中，比如使用Secret初始化Redis，Mysql等密码

## 1 创建Secret

创建Secret的方式有很多，比如使用命令行Kubectl或者使用Yaml/Json文件创建等

### 1 使用Kubectl创建Secret

假设有些Pod需要访问数据库，可以将账户密码存储在username.txt和password.txt文件里，然后以文件的形式创建Secret供Pod使用。

创建账户信息文件

```
echo -n "admin" > username.txt
echo -n "123456" > password.txt
```

以文件username.txt和password.txt创建Secret：

```
kubectl create secret generic db-user-pass --from-file=username.txt --from-file=password.txt
```

输出信息

```
secret/db-user-pass created
```

查看Secret：

```
kubectl get secrets
```

输出信息

```
NAME                  TYPE                                  DATA   AGE
db-user-pass          Opaque                                2      34s
```

```
kubectl describe secrets db-user-pass
```

输出信息

```
Name:         db-user-pass
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
password.txt:  6 bytes
username.txt:  5 bytes
```

默认情况下，get和describe命令都不会显示文件的内容，这是为了防止Secret中的内容被意外暴露

### 2 手动创建Secret

手动创建Secret，因为每一项内容都必须是base64编码，所以要先对其进行编码

```
echo -n "admin" | base64
```

输出信息

```
YWRtaW4=
```

```
echo -n "123456" | base64
```

输出信息

```
MTIzNDU2
```

然后编辑一个yaml文件

```
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Poaque
data:
  username: YWRtaW4=
  password: MTIzNDU2
```

最后，使用该文件创建一个Secret

```
kubectl create -f Secret.yaml
```

输出信息

```
secret/mysecret created
```

## 2 解码Secret

Secret被创建后，会以加密的方式存储于Kubernetes集群中，可以对其进行解码获取内容。

首先以yaml的形式获取刚才创建的Secret

```
kubectl get secrets mysecret -o yaml
```

输出信息

```
apiVersion: v1
data:
  password: MTIzNDU2
  username: YWRtaW4=
kind: Secret
metadata:
  creationTimestamp: "2019-11-01T12:28:47Z"
  name: mysecret
  namespace: default
  resourceVersion: "5379"
  selfLink: /api/v1/namespaces/default/secrets/mysecret
  uid: 0a64ec02-09af-4f33-b53a-955a6bf31479
type: Poaque
```

然后通过--decode解码Secret：

```
echo  "MTIzNDU2" | base64 --decode
```

输出信息为加密前的内容

```
123456
```



## 3 使用Secret

Secret可以作为数据卷被挂载，或作为环境变量以供Pod的容器使用

### 1 在Pod中使用Secret

在Pod中的volume里使用Secret

1. 首先创建一个Secret或者使用已有的Secret，多个Pod可以引用一个Secret
2. 在spce.volumes下增加一个volume，命名随意，spec.volumes.secret.secretName必须和Secret对象的名字相同，并且在同一个NameSpace中。
3. 将spec.containers.volumeMounts加到需要用到该Secret的容器中，并且设置spec.containers.volumeMounts.readOnly=true。
4. 使用spec.containers.volumeMounts.mountPath指定Sectet挂载目录

例如将上面创建的名字为mysecret的Secret挂载到Pod中的/etc/foo:

```
apiVersion: v1
kind: Pod
metadata:
  name: mypod-mysectet
spec:
  containers:
  - name: mypod-mysecret
    image: nginx
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret
```

应用Pod 无报错 Pod正常启动即可

```
kubectl apply -f Pod-Secret.yaml
```

输出信息：

```
pod/mypod-mysectet created
```

验证

```
kubectl exec -it mypod-mysectet /bin/bash
```

查看文件

```
ls /etc/foo/
```

查看文件内容

```
cat /etc/foo/password
```

输出信息

```
123456
```

```
cat /etc/foo/username
```

输出信息

```
admin
```

用到的每个Secret都需要在spec.volumes中指明，如果Pod中有多个容器，每个容器都需要自己的volumeMounts配置块，但是每个Secret只需要一个spec.volumes，可以根据自己的应用场景将多个文件打包到一个Secret中，或者使用多个Secret。